[{"path":"https://josesamos.github.io/tab2xml/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 tab2xml authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://josesamos.github.io/tab2xml/articles/tab2xml.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"tab2xml: XML Generation from Tables","text":"XML files commonly used configure various tools applications. dedicated tools generating XML files structured input forms, many cases, beneficial organize data tables linked primary foreign keys, especially dealing large datasets multiple instances entity. tab2xml package provides solution enabling generation XML files based predefined templates structured tabular data stored Excel (.xlsx) OpenDocument Spreadsheet (.ods) files. leveraging relational tables, users can efficiently handle manage large-scale data entry, ensuring consistency ease modification. approach simplifies XML creation, making accessible scalable working complex data structures.","code":""},{"path":"https://josesamos.github.io/tab2xml/articles/tab2xml.html","id":"content","dir":"Articles","previous_headings":"Introduction","what":"Content","title":"tab2xml: XML Generation from Tables","text":"addition introduction, document includes: example based definition XML schema Mondrian, following Mondrian Documentation. breakdown schema element, detailing corresponding tables, relationships, XML templates used data transformation. process transforming elements generate schema.","code":""},{"path":"https://josesamos.github.io/tab2xml/articles/tab2xml.html","id":"example-mondrian-schema","dir":"Articles","previous_headings":"","what":"Example: Mondrian Schema","title":"tab2xml: XML Generation from Tables","text":"starting point example Mondrian schema, based schema example Mondrian Documentation, shown . define schema, can either edit XML file directly use Pentaho Schema Workbench tool. Another approach break tables templates, work tables, generate required versions directly, shown .","code":"<Schema>     <Cube name=\"Sales\">         <Table name=\"sales_fact_1997\" />         <Dimension name=\"Gender\" foreignKey=\"customer_id\">             <Hierarchy name=\"Gender\" hasAll=\"true\" allMemberName=\"All Genders\" primaryKey=\"customer_id\">                 <Table name=\"customer\" />                 <Level name=\"Gender\" column=\"gender\" type=\"String\" uniqueMembers=\"true\" />             <\/Hierarchy>         <\/Dimension>         <Dimension name=\"Time\" foreignKey=\"time_id\">             <Hierarchy name=\"Time\" hasAll=\"false\"  primaryKey=\"time_id\">                 <Table name=\"time_by_day\" />                 <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\" />                 <Level name=\"Quarter\" column=\"quarter\" type=\"Numeric\" uniqueMembers=\"false\" />                 <Level name=\"Month\" column=\"month_of_year\" type=\"Numeric\" uniqueMembers=\"false\" />             <\/Hierarchy>         <\/Dimension>         <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"#,###\" />         <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\" formatString=\"#,###.##\" />         <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\" formatString=\"#,###.00\" />         <CalculatedMember name=\"Profit\" dimension=\"Measures\" formula=\"[Measures].[Store Sales] - [Measures].[Store Cost]\">             <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.00\" />         <\/CalculatedMember>     <\/Cube> <\/Schema>"},{"path":"https://josesamos.github.io/tab2xml/articles/tab2xml.html","id":"scheme-decomposition","dir":"Articles","previous_headings":"","what":"Scheme decomposition","title":"tab2xml: XML Generation from Tables","text":"Next, decompose content schema tables, defined sheets spreadsheets files (.xlsx .ods) included package, templates.","code":""},{"path":"https://josesamos.github.io/tab2xml/articles/tab2xml.html","id":"root-of-the-schema-template-schema_template-xml","dir":"Articles","previous_headings":"Scheme decomposition","what":"Root of the schema template: schema_template.xml","title":"tab2xml: XML Generation from Tables","text":"root schema template. root can contain one token (case, {Cube} token). multiple tokens none found, error raised. Tokens defined using name enclosed { }. Token names case-insensitive. Tokens reference either sheets spreadsheet columns sheet associated element. example, schema consists one cubes. Starting root, element must associated sheet template file, sheet’s columns components included.","code":"<Schema>     {Cube} <\/Schema>"},{"path":"https://josesamos.github.io/tab2xml/articles/tab2xml.html","id":"cube","dir":"Articles","previous_headings":"Scheme decomposition","what":"Cube","title":"tab2xml: XML Generation from Tables","text":"one cube defined schema; therefore, table contains one row. need reference element another, add primary key column. name column must consist sheet name followed _pk suffix. reference elements another table, add foreign key column, named referenced sheet _fk suffix. case, cube associated table. However, since elements can also associated tables, add foreign key cube (well element associated table). Regarding template, can include two types tokens: Tokens referencing table columns: replaced value. Tokens referencing elements (referenced sheet name): replaced another template. including tokens reference sheets, token must placed separate line, replaced templates.","code":"<Cube name=\"{name}\">         {Table}         {Dimension}         {Measure}         {CalculatedMember}     <\/Cube>"},{"path":"https://josesamos.github.io/tab2xml/articles/tab2xml.html","id":"table","dir":"Articles","previous_headings":"Scheme decomposition","what":"Table","title":"tab2xml: XML Generation from Tables","text":"Since tables referenced elements, define primary key values allow referencing (cube). template needs include table name using specified syntax.","code":"<Table name=\"{name}\" />"},{"path":"https://josesamos.github.io/tab2xml/articles/tab2xml.html","id":"dimension","dir":"Articles","previous_headings":"Scheme decomposition","what":"Dimension","title":"tab2xml: XML Generation from Tables","text":"dimension included cube can also contain elements reference . template, sheet’s columns containing element (includes one hierarchies) referenced.","code":"<Dimension name=\"{name}\" foreignKey=\"{foreignKey}\">             {Hierarchy}         <\/Dimension>"},{"path":"https://josesamos.github.io/tab2xml/articles/tab2xml.html","id":"hierarchy","dir":"Articles","previous_headings":"Scheme decomposition","what":"Hierarchy","title":"tab2xml: XML Generation from Tables","text":"Hierarchies reference dimensions contain associated tables. template, can see includes table levels make hierarchy.","code":"<Hierarchy name=\"{name}\" hasAll=\"{hasAll}\" {allMemberName} primaryKey=\"{primaryKey}\">                 {Table}                 {Level}             <\/Hierarchy>"},{"path":"https://josesamos.github.io/tab2xml/articles/tab2xml.html","id":"level","dir":"Articles","previous_headings":"Scheme decomposition","what":"Level","title":"tab2xml: XML Generation from Tables","text":"Levels need referenced, include primary key. Instead, reference hierarchies belong . template references columns associated sheet.","code":"<Level name=\"{name}\" column=\"{column}\" type=\"{type}\" uniqueMembers=\"{uniqueMembers}\" />"},{"path":"https://josesamos.github.io/tab2xml/articles/tab2xml.html","id":"measure","dir":"Articles","previous_headings":"Scheme decomposition","what":"Measure","title":"tab2xml: XML Generation from Tables","text":"Measures included cubes must reference . Since need referenced, require primary key. template includes columns sheet.","code":"<Measure name=\"{name}\" column=\"{column}\" aggregator=\"{aggregator}\" formatString=\"{formatString}\" />"},{"path":"https://josesamos.github.io/tab2xml/articles/tab2xml.html","id":"calculatedmember","dir":"Articles","previous_headings":"Scheme decomposition","what":"CalculatedMember","title":"tab2xml: XML Generation from Tables","text":"Calculated members may components must referenceable (primary key) included cubes. template shows elements contain.","code":"<CalculatedMember name=\"{name}\" dimension=\"{dimension}\" formula=\"{formula}\">             {CalculatedMemberProperty}         <\/CalculatedMember>"},{"path":"https://josesamos.github.io/tab2xml/articles/tab2xml.html","id":"calculatedmemberproperty","dir":"Articles","previous_headings":"Scheme decomposition","what":"CalculatedMemberProperty","title":"tab2xml: XML Generation from Tables","text":"Finally, properties calculated members reference. template uses columns corresponding sheet.","code":"<CalculatedMemberProperty name=\"{name}\" value=\"{value}\" />"},{"path":"https://josesamos.github.io/tab2xml/articles/tab2xml.html","id":"generate-the-schema","dir":"Articles","previous_headings":"","what":"Generate the Schema","title":"tab2xml: XML Generation from Tables","text":"generate schema, tokens template replaced corresponding values data source. handles direct replacements associated sheet foreign key relationships. shown example, need specify: spreadsheet file. root template. rest templates must located folder root template determined content templates processed. name output XML file (none specified, file name spreadsheet created location). resulting output shown .","code":"library(tab2xml)  # Define file paths source_xml <- system.file(\"extdata\", \"schema_template.xml\", package = \"tab2xml\") source_xlsx <- system.file(\"extdata\", \"schema.xlsx\", package = \"tab2xml\") temp_file <- tempfile(fileext = \".xml\")  # Convert spreadsheet to XML file <- sheet2xml(source_xlsx, source_xml, temp_file) library(xml2)  xml_content <- readLines(file, warn = FALSE)  cat(\"```xml\\n\", paste(xml_content, collapse = \"\\n\"), \"\\n```\", sep = \"\") <Schema>     <Cube name=\"Sales\">                 <Table name=\"sales_fact_1997\" />         <Dimension name=\"Gender\" foreignKey=\"customer_id\">             <Hierarchy name=\"Gender\" hasAll=\"true\" allMemberName=\"All Genders\" primaryKey=\"customer_id\">                 <Table name=\"customer\" />                 <Level name=\"Gender\" column=\"gender\" type=\"String\" uniqueMembers=\"true\" />             <\/Hierarchy>         <\/Dimension>         <Dimension name=\"Time\" foreignKey=\"time_id\">             <Hierarchy name=\"Time\" hasAll=\"false\"  primaryKey=\"time_id\">                 <Table name=\"time_by_day\" />                 <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\" />                 <Level name=\"Quarter\" column=\"quarter\" type=\"Numeric\" uniqueMembers=\"false\" />                 <Level name=\"Month\" column=\"month_of_year\" type=\"Numeric\" uniqueMembers=\"false\" />             <\/Hierarchy>         <\/Dimension>         <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"#,###\" />         <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\" formatString=\"#,###.##\" />         <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\" formatString=\"#,###.00\" />         <CalculatedMember name=\"Profit\" dimension=\"Measures\" formula=\"[Measures].[Store Sales] - [Measures].[Store Cost]\">             <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.00\" />                      <\/CalculatedMember>     <\/Cube> <\/Schema>"},{"path":"https://josesamos.github.io/tab2xml/articles/tab2xml.html","id":"conclusions","dir":"Articles","previous_headings":"Generate the Schema","what":"Conclusions","title":"tab2xml: XML Generation from Tables","text":"tab2xml package offers efficient scalable method generating XML files tabular data. using structured templates relational tables, package facilitates management complex datasets maintaining consistency accuracy. approach particularly advantageous scenarios requiring generation large XML files handling multiple entities defined relationships. streamlines transformation process, reduces manual errors, enhances maintainability allowing users modify underlying data without altering XML structure. provided example, based Mondrian schema, demonstrates apply methodology real-world use cases. framework can extended domains requiring XML generation relational data, offering flexible robust solution data-driven XML creation.","code":""},{"path":"https://josesamos.github.io/tab2xml/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jose Samos. Author, maintainer. Universidad de Granada. Copyright holder.","code":""},{"path":"https://josesamos.github.io/tab2xml/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Samos J (2025). tab2xml: XML Generation Tables. R package version 1.0.0.9000, https://github.com/josesamos/tab2xml, https://josesamos.github.io/tab2xml/.","code":"@Manual{,   title = {tab2xml: XML Generation from Tables},   author = {Jose Samos},   year = {2025},   note = {R package version 1.0.0.9000,     https://github.com/josesamos/tab2xml},   url = {https://josesamos.github.io/tab2xml/}, }"},{"path":"https://josesamos.github.io/tab2xml/index.html","id":"tab2xml-","dir":"","previous_headings":"","what":"XML Generation from Tables","title":"XML Generation from Tables","text":"goal tab2xml convert spreadsheet files (.xlsx .ods) structured XML documents using predefined template. package processes spreadsheet data, replacing template tokens corresponding values, manages foreign key relationships automatically.","code":""},{"path":"https://josesamos.github.io/tab2xml/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"XML Generation from Tables","text":"can install released version tab2xml CRAN : development version GitHub :","code":"install.packages(\"tab2xml\") # install.packages(\"pak\") pak::pak(\"josesamos/tab2xml\")"},{"path":"https://josesamos.github.io/tab2xml/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"XML Generation from Tables","text":"example demonstrates use tab2xml convert Excel ODS file XML file, based schema example Mondrian Documentation.","code":"library(tab2xml)  # Define file paths source_xml <- system.file(\"extdata\", \"schema_template.xml\", package = \"tab2xml\") source_xlsx <- system.file(\"extdata\", \"schema.xlsx\", package = \"tab2xml\") temp_file <- tempfile(fileext = \".xml\")"},{"path":"https://josesamos.github.io/tab2xml/index.html","id":"show-spreadsheet-contents","dir":"","previous_headings":"Example","what":"Show spreadsheet contents","title":"XML Generation from Tables","text":"","code":"sheet_names <- readxl::excel_sheets(source_xlsx) for (sheet in sheet_names) {   cat(\"\\n#### Sheet:\", sheet)   data <- readxl::read_excel(source_xlsx, sheet = sheet)   print(knitr::kable(data)) }"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://josesamos.github.io/tab2xml/index.html","id":"convert-spreadsheet-to-xml","dir":"","previous_headings":"Example","what":"Convert spreadsheet to XML","title":"XML Generation from Tables","text":"","code":"file <- sheet2xml(source_xlsx, source_xml, temp_file)"},{"path":"https://josesamos.github.io/tab2xml/index.html","id":"check-output","dir":"","previous_headings":"Example","what":"Check output","title":"XML Generation from Tables","text":"way, can organize work data tabular form generate XML documents directly using provided templates.","code":"library(xml2)  xml_content <- readLines(file, warn = FALSE)  cat(\"```xml\\n\", paste(xml_content, collapse = \"\\n\"), \"\\n```\", sep = \"\") <Schema>     <Cube name=\"Sales\">                 <Table name=\"sales_fact_1997\" />         <Dimension name=\"Gender\" foreignKey=\"customer_id\">             <Hierarchy name=\"Gender\" hasAll=\"true\" allMemberName=\"All Genders\" primaryKey=\"customer_id\">                 <Table name=\"customer\" />                 <Level name=\"Gender\" column=\"gender\" type=\"String\" uniqueMembers=\"true\" />             <\/Hierarchy>         <\/Dimension>         <Dimension name=\"Time\" foreignKey=\"time_id\">             <Hierarchy name=\"Time\" hasAll=\"false\"  primaryKey=\"time_id\">                 <Table name=\"time_by_day\" />                 <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\" />                 <Level name=\"Quarter\" column=\"quarter\" type=\"Numeric\" uniqueMembers=\"false\" />                 <Level name=\"Month\" column=\"month_of_year\" type=\"Numeric\" uniqueMembers=\"false\" />             <\/Hierarchy>         <\/Dimension>         <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"#,###\" />         <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\" formatString=\"#,###.##\" />         <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\" formatString=\"#,###.00\" />         <CalculatedMember name=\"Profit\" dimension=\"Measures\" formula=\"[Measures].[Store Sales] - [Measures].[Store Cost]\">             <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.00\" />                      <\/CalculatedMember>     <\/Cube> <\/Schema>"},{"path":"https://josesamos.github.io/tab2xml/reference/sheet2xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Spreadsheet to XML — sheet2xml","title":"Convert a Spreadsheet to XML — sheet2xml","text":"reads spreadsheet file (Excel ODS), processes using provided XML template, generates XML output file.","code":""},{"path":"https://josesamos.github.io/tab2xml/reference/sheet2xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Spreadsheet to XML — sheet2xml","text":"","code":"sheet2xml(file_path, template_path, xml_path = NULL)"},{"path":"https://josesamos.github.io/tab2xml/reference/sheet2xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Spreadsheet to XML — sheet2xml","text":"file_path Character. Path spreadsheet file converted. Supports Excel (.xlsx) ODS formats. template_path Character. Path XML template file guide transformation process. xml_path Character (optional). Output path generated XML file. NULL, considered XML file name location spreadsheet file.","code":""},{"path":"https://josesamos.github.io/tab2xml/reference/sheet2xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Spreadsheet to XML — sheet2xml","text":"Character. file path generated XML document.","code":""},{"path":"https://josesamos.github.io/tab2xml/reference/sheet2xml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Spreadsheet to XML — sheet2xml","text":"","code":"source_xml <- system.file(\"extdata\", \"schema_template.xml\", package = \"tab2xml\")  source_xlsx <- system.file(\"extdata\", \"schema.xlsx\", package = \"tab2xml\") temp_file1 <- tempfile(fileext = \".xml\") sheet2xml(source_xlsx, source_xml, temp_file1) #> [1] \"/tmp/Rtmp6qW2FQ/file1cc049bb3bfc.xml\"  source_ods <- system.file(\"extdata\", \"schema.ods\", package = \"tab2xml\") temp_file2 <- tempfile(fileext = \".xml\") sheet2xml(source_ods, source_xml, temp_file2) #> [1] \"/tmp/Rtmp6qW2FQ/file1cc04af6b185.xml\""},{"path":[]},{"path":"https://josesamos.github.io/tab2xml/news/index.html","id":"tab2xml-100","dir":"Changelog","previous_headings":"","what":"tab2xml 1.0.0","title":"tab2xml 1.0.0","text":"CRAN release: 2025-02-21","code":""},{"path":"https://josesamos.github.io/tab2xml/news/index.html","id":"tab2xml-010","dir":"Changelog","previous_headings":"","what":"tab2xml 0.1.0","title":"tab2xml 0.1.0","text":"Initial CRAN submission.","code":""}]
